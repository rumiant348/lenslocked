package models

import (
	"errors"
	"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/postgres"
	"golang.org/x/crypto/bcrypt"
	"lenslocked.com/hash"
	"lenslocked.com/rand"
)

var (
	// ErrNotFound is returned when a resource cannot be found
	// in the database.
	ErrNotFound = errors.New("models: resource not found")
	// ErrInvalidID is returned when an invalid id is passed to methods
	// like Delete.
	ErrInvalidID = errors.New("models: ID provided was invalid")
	// ErrInvalidPassword is returned when an invalid password
	// is used when attempting to authenticate a user.
	ErrInvalidPassword = errors.New("models: incorrect password provided")

	userPwPepper = "secret-secret-secret"
	key          = "secret-hmac-key"
)

// UserDB is used to interact with the users database
//
// For pretty much all single users queries
// If the user is found, we will return a nil error
// If the user is not found, we will return ErrNotFound
// If there is another error, we will return an error with
// more information about what went wrong. This may not be
// an error generated by the models package.
//
// For single user queries, any error but ErrNotFound should
// probably result in a 500 error until we make "public"
// facing errors
type UserDB interface {
	// ByID ByEmail ByRemember - methods for querying a single user
	ByID(in uint) (*User, error)
	ByEmail(email string) (*User, error)
	ByRemember(token string) (*User, error)

	// Create Update Delete - methods for altering users
	Create(user *User) error
	Update(user *User) error
	Delete(id uint) error

	// Close is used to close db connection
	Close() error

	// AutoMigrate and Destructive reset are migration methods
	AutoMigrate() error
	DestructiveReset() error
}

// UserService is a set of methods to manipulate and
// work with the user model
type UserService interface {
	// Authenticate will verify the provided email address and
	// password are correct. If they are correct the user
	// corresponding to that email will be returned. Otherwise
	// you will receive either:
	// ErrNotFound, ErrInvalidPassword, or another error if
	// something goes wrong
	Authenticate(email, password string) (*User, error)
	UserDB
}

type userService struct {
	UserDB
}

// Authenticate can be used to authenticate a user with the
// provided email and password.
// If the email address provided is invalid, this will return
// nil, ErrNotFound
// If the password provided is invalid, this will return
// nil, ErrInvalidPassword
// If the email and password are both valid, this will return
// user, nil
// Otherwise if another error is encountered this will return
// nil, error
func (us *userService) Authenticate(email, password string) (*User, error) {
	user, err := us.ByEmail(email)
	if err != nil {
		return nil, err
	}

	err = bcrypt.CompareHashAndPassword(
		[]byte(user.PasswordHash),
		[]byte(password+userPwPepper))
	switch err {
	case nil:
		return user, nil
	case bcrypt.ErrMismatchedHashAndPassword:
		return nil, ErrInvalidPassword
	default:
		return nil, err
	}
}

func NewUserService(connectionInfo string) (UserService, error) {
	ug, err := newUserGorm(connectionInfo)
	if err != nil {
		return nil, err
	}
	return &userService{
		UserDB: userValidator{
			UserDB: ug,
		},
	}, nil
}

var _ UserService = &userService{}

// userGorm represents our database integration layer
// and implements UserDB interface fully.
type userGorm struct {
	db   *gorm.DB
	hmac hash.HMAC
}

// let's check that we actually implement an interface. Hurray to implicit interfaces realization!)
var _ UserDB = &userGorm{}

type User struct {
	gorm.Model
	Name         string
	Email        string `gorm:"not null;unique_index"`
	Password     string `gorm:"-"`
	PasswordHash string `gorm:"not null"`
	Remember     string `gorm:"-"`
	RememberHash string `gorm:"not null;unique_index"`
}

func newUserGorm(connectionInfo string) (*userGorm, error) {
	db, err := gorm.Open("postgres", connectionInfo)
	if err != nil {
		return nil, err
	}
	db.LogMode(true)
	hmac := hash.NewHMAC(key)
	return &userGorm{
		db:   db,
		hmac: hmac,
	}, nil
}

// userValidator is our validation layer that validates
// and normalizes data before passing it on to the next
// UserDB in our interface chain
type userValidator struct {
	UserDB
}

// Create will create the provided user and back-fill data
// like the ID, CreatedAt and UpdatedAt fields.
func (ug *userGorm) Create(user *User) error {
	hashedBytes, err := bcrypt.GenerateFromPassword(
		[]byte(user.Password+userPwPepper), bcrypt.DefaultCost)
	if err != nil {
		return err
	}
	user.PasswordHash = string(hashedBytes)
	user.Password = ""

	if user.Remember == "" {
		user.Remember, err = rand.RememberToken()
		if err != nil {
			return err
		}
	}
	user.RememberHash = ug.hmac.Hash(user.Remember)
	err = ug.db.Create(user).Error
	if err != nil {
		return err
	}
	return nil
}

// ByID will look up a user with the provided ID.
// If the user is found, we will return a nil error
// If the user is not found, we will return ErrNotFound
// If there is another error we will return an error with
// more information about was wrong. This may not be
// an error generated by the models package.
//
// As a general rule, any error but ErrNotFound should
// probably result in a 500 error.
func (ug *userGorm) ByID(id uint) (*User, error) {
	return getUserByCondition(ug.db, "id = ?", id)
}

// ByEmail will look up a user with the provided email.
func (ug *userGorm) ByEmail(email string) (*User, error) {
	return getUserByCondition(ug.db, "email = ?", email)
}

// ByRemember looks up a user with the given remember token
// and will return that user. The method will handle hashing the token.
func (ug *userGorm) ByRemember(token string) (*User, error) {
	return getUserByCondition(ug.db, "remember_hash = ?", ug.hmac.Hash(token))
}

func getUserByCondition(db *gorm.DB, query string, args ...interface{}) (*User, error) {
	var user User
	db = db.Where(query, args)
	if err := first(db, &user); err != nil {
		return nil, err
	}
	return &user, nil
}

func first(db *gorm.DB, dst interface{}) error {
	err := db.First(dst).Error
	if err == gorm.ErrRecordNotFound {
		return ErrNotFound
	}
	return err
}

// Update will update the provided user with all the data
// in the provided user object.
// if a user with such id absent, creates a new entry
func (ug *userGorm) Update(user *User) error {

	// Note: we don't handle changing the password yet (set new password hash)

	if user.Remember != "" {
		user.RememberHash = ug.hmac.Hash(user.Remember)
	}
	return ug.db.Save(user).Error
}

// UpdateRememberToken updates remember token in the user object,
// not touching other attributes to avoid potential race conditions
func (ug *userGorm) UpdateRememberToken(user *User) error {

	// Note: we don't handle changing the password yet (set new password hash)

	if user.Remember != "" {
		user.RememberHash = ug.hmac.Hash(user.Remember)
	}
	return ug.db.Model(user).Update("remember_hash", ug.hmac.Hash(user.Remember)).Error
}

// Delete deletes a user by id. Actually just sets deleted_at
// to a non-null value, so the entry is recoverable
// GORM deletes all data if given 0 as an id, so returning
// an ErrInvalidID for id == 0
func (ug *userGorm) Delete(id uint) error {
	if id == 0 {
		return ErrInvalidID
	}
	user := User{
		Model: gorm.Model{ID: id},
	}
	return ug.db.Delete(&user).Error
}

func (ug *userGorm) Close() error {
	return ug.db.Close()
}

// AutoMigrate will automatically migrate the
// users table
func (ug *userGorm) AutoMigrate() error {
	if err := ug.db.AutoMigrate(&User{}).Error; err != nil {
		return err
	}
	return nil
}

// DestructiveReset drops the user table and resets it
func (ug *userGorm) DestructiveReset() error {
	err := ug.db.DropTableIfExists(&User{}).Error
	if err != nil {
		return err
	}
	return ug.AutoMigrate()
}
