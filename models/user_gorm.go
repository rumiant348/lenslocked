package models

import (
	"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/postgres"
)

// UserGorm

// userGorm represents our database integration layer
// and implements UserDB interface fully.
type userGorm struct {
	db *gorm.DB
}

// let's check that we actually implement an interface. Hurray to implicit interfaces realization!)
var _ UserDB = &userGorm{}

// Create will create the provided user in the database
func (ug *userGorm) Create(user *User) error {
	return ug.db.Create(user).Error
}

// ByID will look up a user with the provided ID.
// If the user is found, we will return a nil error
// If the user is not found, we will return ErrNotFound
// If there is another error we will return an error with
// more information about was wrong. This may not be
// an error generated by the models package.
//
// As a general rule, any error but ErrNotFound should
// probably result in a 500 error.
func (ug *userGorm) ByID(id uint) (*User, error) {
	return getUserByCondition(ug.db, "id = ?", id)
}

// ByEmail will look up a user with the provided email.
func (ug *userGorm) ByEmail(email string) (*User, error) {
	return getUserByCondition(ug.db, "email = ?", email)
}

// ByRemember looks up a user with the given remember token
// and will return that user. The method expects the remember
// token to be already hashed
func (ug *userGorm) ByRemember(token string) (*User, error) {
	return getUserByCondition(ug.db, "remember_hash = ?", token)
}

func getUserByCondition(db *gorm.DB, query string, args ...interface{}) (*User, error) {
	var user User
	db = db.Where(query, args)
	if err := first(db, &user); err != nil {
		return nil, err
	}
	return &user, nil
}

func first(db *gorm.DB, dst interface{}) error {
	err := db.First(dst).Error
	if err == gorm.ErrRecordNotFound {
		return ErrNotFound
	}
	return err
}

// Update will update the provided user with all the data
// in the provided user object.
// if a user with such id absent, creates a new entry
func (ug *userGorm) Update(user *User) error {
	return ug.db.Save(user).Error
}

// not sure if worth doing now
//// UpdateRememberToken updates remember token in the user object,
//// not touching other attributes to avoid potential race conditions
//func (ug *userGorm) UpdateRememberToken(user *User) error {
//
//	// Note: we don't handle changing the password yet (set new password hash)
//
//	if user.Remember != "" {
//		user.RememberHash = ug.hmac.Hash(user.Remember)
//	}
//	return ug.db.Model(user).Update("remember_hash", ug.hmac.Hash(user.Remember)).Error
//}

// Delete deletes a user by id. Actually just sets deleted_at
// to a non-null value, so the entry is recoverable
func (ug *userGorm) Delete(id uint) error {
	user := User{
		Model: gorm.Model{ID: id},
	}
	return ug.db.Delete(&user).Error
}
